from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Filter

import psycopg2

from app.config import host, port, user, password

import app.keyboard as kb

maint_router = Router()

conn = None

# –°–ª–æ–≤–∞—Ä–∏
chat_data = {}
user_states = {}

# –°–ø–∏—Å–æ–∫ Maintenance Group
maintenance_id = [1035107072, # Daniel
                  103200201   # Dima
                 ]

#                     MAINTENANCE                      #
#  **************************************************  #

class Maintenance(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in maintenance_id

@maint_router.message(Maintenance(), F.text == 'Maintenance')
async def maint_menu(message: Message):
    await message.answer('Maintenance Status :: [OK]')

    db_name = "trafo_db"  # –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    global conn

    await message.answer(f"Connecting to << {db_name} >>")
    print(f"{message.from_user.id} trying connect to <<{db_name}>> database")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö
    try:
        # Connect to the default "postgres" database without starting a new transaction
        conn = psycopg2.connect(
            host=host,
            port=port,
            user=user,
            password=password,
            database=f"{db_name}"
        )
        conn.set_isolation_level(0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑–æ–ª—è—Ü–∏–∏ / –±–µ–∑ –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–¥

        await message.answer("Connection to the database was successful.")
        print(f"{message.from_user.id} connection to the database was successful.")

        await message.answer("...", reply_markup=kb.maintenance)

    except Exception as ex:
        print(f"Error: {ex}")

# -------------- Jig Calibration

@maint_router.message(F.text == 'Jig Calibration')
async def jig_calib(message: Message):
    await message.answer("...", reply_markup=kb.jig)

# -------- –í–≤–µ—Å—Ç–∏ –º–æ–¥–µ–ª—å JIG

@maint_router.message(F.text == '–í–≤–µ—Å—Ç–∏ –ú–æ–¥–µ–ª—å –®–∞–±–ª–æ–Ω–∞')
async def input_jig(message: Message):
    print(f"{message.from_user.id} Input JIG name")
    await message.answer(":: –í–≤–µ–¥–∏—Ç–µ –ú–æ–¥–µ–ª—å –®–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —à–∞–±–ª–æ–Ω–∞
    user_states[message.from_user.id] = "waiting_for_input_jig_name"

# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@maint_router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == "waiting_for_input_jig_name")
async def db_jig_name(message: Message):
    jig_name = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª "exit", –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if jig_name.lower() == 'exit':
        await message.answer(":: –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –í–≤–æ–¥–∞.")
        user_states.pop(message.from_user.id, None)
        return

    # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    with conn.cursor() as curs:
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∏–º–µ–Ω–∏ "jig" –≤ —Ç–∞–±–ª–∏—Ü–µ
        curs.execute("SELECT COUNT(*) FROM jigs WHERE name = %s", (jig_name,))
        count = curs.fetchone()[0]

        if count > 0:
            await message.answer(f":: {jig_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            await message.answer(f":: {jig_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# -------- –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç

@maint_router.message(F.text == '–°–ø–∏—Å–æ–∫ –†–∞–±–æ—á–∏—Ö –ú–µ—Å—Ç')
async def list_places(message: Message):
    table_name = "wps"

    # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    with conn.cursor() as curs:
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
        curs.execute(f"SELECT id, name FROM {table_name}")
        all_details = curs.fetchall()

        if all_details:
            wps_list_message = ":: –°–ø–∏—Å–æ–∫ –†–∞–±–æ—á–∏—Ö –º–µ—Å—Ç:\n"
            for detail in all_details:
                detail_id, detail_name = detail[0], detail[1]
                wps_list_message += f":: {detail_name}\n"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
            num_places = len(all_details)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            wps_list_message += f"\n:: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç: {num_places}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –≤ —á–∞—Ç
            await message.answer(wps_list_message)
        else:
            await message.answer(":: –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç.")

# -------- –°–ø–∏—Å–æ–∫ JIG

@maint_router.message(F.text == '–°–ø–∏—Å–æ–∫ –®–∞–±–ª–æ–Ω–æ–≤')
async def jig_list(message: Message):
    table_name = "jigs"

    # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    with conn.cursor() as curs:
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        curs.execute(f"SELECT id, name FROM {table_name}")
        all_details = curs.fetchall()

        if all_details:
            jig_list_message = ":: –°–ø–∏—Å–æ–∫ –®–∞–±–ª–æ–Ω–æ–≤:\n"
            for jig in all_details:
                jig_id, jig_name = jig[0], jig[1]
                jig_list_message += f":: {jig_name}\n"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç
            num_jigs = len(all_details)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            jig_list_message += f"\n:: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–±–ª–æ–Ω–æ–≤: {num_jigs}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ JIGs –≤ —á–∞—Ç
            await message.answer(jig_list_message)
        else:
            await message.answer(":: –í –ë–î –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.")

# -------- –ß–µ—Ä—Ç–µ–∂–∏

@maint_router.message(F.text == '–ß–µ—Ä—Ç–µ–∂–∏')
async def jig_blueprint(message: Message):
    await message.answer("–ß–µ—Ä—Ç–µ–∂–∏")

# -------- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è

@maint_router.message(F.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
async def show_instruction(message: Message):

    message_instr = (
        '** –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ü–æ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é **\n'
        'üëâüèª –¢\n'
        'üëâüèª –´\n'
        'üëâüèª –ü\n'
        'üëâüèª –ï\n'
        'üëâüèª –¢\n'
        'üëâüèª –£\n'
        'üëâüèª –•'
    )
    await message.answer(message_instr)